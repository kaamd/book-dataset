import altair as alt
import pandas as pd
import streamlit as st

# Show the page title and description.
st.set_page_config(page_title="Book dataset", page_icon="üìö")
st.title("üìö Book dataset")
st.write(
    """
    –≠—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥ —è–ø–æ–Ω—Å–∫–∏—Ö –∞–≤—Ç–æ—Ä–æ–≤, –∫–Ω–∏–≥–∏ –∫–æ—Ç–æ—Ä—ã—Ö –∏–∑–¥–∞–≤–∞–ª–∏—Å—å —á–∞—â–µ –¥—Ä—É–≥–∏—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–∏ 10 –ª–µ—Ç –≤ –†–æ—Å—Å–∏–∏.
    """
)

# Load the data from a CSV.
@st.cache_data
def load_data():
    df = pd.read_csv("japanese_books (1).csv")
    return df

df = load_data()

# –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∞–≤—Ç–æ—Ä—ã –≤ —Ç–æ–º –ø–æ—Ä—è–¥–∫–µ, –≤ –∫–æ—Ç–æ—Ä–æ–º –æ–Ω–∏ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ DataFrame
ordered_authors = df['author'].unique()

# Show a multiselect widget with the authors using `st.multiselect`, –∏—Å–ø–æ–ª—å–∑—É–µ–º ordered_authors
authors = st.multiselect(
    "–í—ã–±–µ—Ä–∏—Ç–µ –∞–≤—Ç–æ—Ä–æ–≤",
    ordered_authors,
    default=[
        "–•–∞—Ä—É–∫–∏ –ú—É—Ä–∞–∫–∞–º–∏", 
        "–°–æ–¥–∑–∏ –°–∏–º–∞–¥–∞", 
        "–ö–æ—Ç–∞—Ä–æ –ò—Å–∞–∫–∞", 
        "–ù–∞—Ü—É—Ö–∏–∫–æ –ö—ë–≥–æ–∫—É", 
        "–ö–∞–Ω–∞—ç –ú–∏–Ω–∞—Ç–æ", 
        "–ê—à–∞ –õ–µ–º–º–∏", 
        "–ö—ç–π–≥–æ –•–∏–≥–∞—Å–∏–Ω–æ", 
        "–•–∞—Ä–æ–ª—å–¥ –°–∞–∫—É–∏—Å–∏", 
        "–¢–æ—Ä—É –§—É–¥–∑–∏—Å–∞–≤–∞",
    ],
)


# Filter the dataframe based on the selected authors.
df_filtered = df[df["author"].isin(authors)]

# –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü —Å –ø–æ—Ä—è–¥–∫–æ–≤—ã–º –Ω–æ–º–µ—Ä–æ–º
df_filtered['index'] = df_filtered.index + 1

# –° –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ 'author' –∏ –∞–≥—Ä–µ–≥–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π –∫–Ω–∏–≥
df_grouped = df_filtered.groupby(['index', 'author'])['title'].apply(lambda x: ', '.join(x)).reset_index()

# –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä—ã –ø–æ –ø–æ—Ä—è–¥–∫—É –ø–æ—è–≤–ª–µ–Ω–∏—è –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º DataFrame
df_grouped['author'] = pd.Categorical(df_grouped['author'], categories=ordered_authors, ordered=True)
df_grouped.sort_values('author', inplace=True)

# –ü–µ—Ä–µ—Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º DataFrame –≤ —Å–≤–æ–¥–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
df_reshaped = df_grouped.pivot(index='index', columns='author', values='title').fillna('')

# –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å –∏ –≤—ã–≤–æ–¥–∏–º —Ç–∞–±–ª–∏—Ü—É
df_reshaped.index.name = '‚Ññ'

# –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö
data = {
    "author": [
        "–•–∞—Ä—É–∫–∏ –ú—É—Ä–∞–∫–∞–º–∏", 
        "–°–æ–¥–∑–∏ –°–∏–º–∞–¥–∞", 
        "–ö–æ—Ç–∞—Ä–æ –ò—Å–∞–∫–∞", 
        "–ù–∞—Ü—É—Ö–∏–∫–æ –ö—ë–≥–æ–∫—É", 
        "–ö–∞–Ω–∞—ç –ú–∏–Ω–∞—Ç–æ"
    ],
    "title": [
        "–£–±–∏–π—Ü–∞ –∞—Ç–æ–º–æ–≤, –ö–æ—Ä–∞–±–ª—å –º–µ—á—Ç—ã, –õ–∞–≤–∫–∞ —Å—Ç—Ä–∞–Ω–Ω—ã—Ö –≤–µ—â–µ–π, –ò—Å–∫—É—à–µ–Ω–∏–µ", 
        "–ë–ª–∞–≥–æ—Ä–æ–¥–Ω–∞—è –ø—É—Å—Ç–æ—Ç–∞, –°–æ–ª–Ω–µ—á–Ω—ã–µ —á–∞—Å—ã", 
        "–ò—Å–∫—É—Å—Å—Ç–≤–æ –æ–±–º–∞–Ω–∞", 
        "–¢–∞–π–Ω—ã —Å—Ç–∞—Ä–æ–≥–æ –∑–∞–º–∫–∞", 
        "–°–≤–µ—Ç –≤–æ –º–≥–ª–µ, –ü—É—Ç—å –∫ –∑–≤–µ–∑–¥–∞–º"
    ]
}

# –°–æ–∑–¥–∞–Ω–∏–µ DataFrame
df = pd.DataFrame(data)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª—è —Ç–∞–±–ª–∏—Ü—ã
st.markdown(
    """
    <style>
    .streamlit-table {
        border-collapse: collapse;
        width: 100%;
    }
    
    .streamlit-table th, .streamlit-table td {
        max-width: 200px; /* –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞ —è—á–µ–µ–∫ */
        text-align: left; /* –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ */
        padding: 5px; /* –û—Ç—Å—Ç—É–ø—ã –≤–Ω—É—Ç—Ä–∏ —è—á–µ–µ–∫ */
        overflow-wrap: break-word; /* –ü–µ—Ä–µ–Ω–æ—Å —Å–ª–æ–≤ */
        word-wrap: break-word; /* –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–Ω–æ—Å–∞ –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤ */
        word-break: break-word; /* –ü–µ—Ä–µ–Ω–æ—Å —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É */
        white-space: normal; /* –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç—å —Ç–µ–∫—Å—Ç */
        border: 1px solid #ddd; /* –ì—Ä–∞–Ω–∏—Ü–∞ —è—á–µ–µ–∫ */
    }
    
    .streamlit-table th {
        background-color: #f0f0f0; /* –¶–≤–µ—Ç —Ñ–æ–Ω–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ */
    }
    </style>
    """,
    unsafe_allow_html=True
)

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
st.dataframe(
    df.style.set_table_attributes('class="streamlit-table"'),
    use_container_width=True,
)

# Prepare data for the bar chart.
df_chart = df_filtered.groupby(['author', 'title']).size().reset_index(name='count')

# –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ count —è–≤–ª—è–µ—Ç—Å—è —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º
chart = alt.Chart(df_chart).mark_bar().encode(
    x=alt.X('sum(count):Q', title='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–∏–≥', axis=alt.Axis(format='d', ticks=True, grid=False)),  # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Å—å X –∫–∞–∫ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
    y=alt.Y('author:N', title='–ê–≤—Ç–æ—Ä—ã', sort='-x'),
    color='title:N',  # –¶–≤–µ—Ç –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∫–Ω–∏–≥–∏
    tooltip=['title:N', 'count:Q']  # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
).properties(height=400)

# –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –Ω–∞ –æ—Å–∏ X –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
chart = chart.encode(
    x=alt.X('sum(count):Q', title='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–∏–≥', axis=alt.Axis(format='d', ticks=True, grid=False, values=[0, 1, 2, 3, 4, 5]))  # –£–∫–∞–∑–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏–º –≤–∏–¥–µ—Ç—å –Ω–∞ –æ—Å–∏ X
)

# Display the data as a bar chart using `st.altair_chart`.
st.altair_chart(chart, use_container_width=True)
